Python 3.8.10 (default, Sep 28 2021, 16:10:42) 
[GCC 9.3.0] on linux
Type "help", "copyright", "credits" or "license()" for more information.
>>> import os
>>> os.getcwd()
'/home/jack-o-connor'
>>> os.cd('/home/jack-o-connor/College/thirdyear/Cloud/data')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#2>", line 1, in <module>
AttributeError: module 'os' has no attribute 'cd'
>>> os.chdir('/home/jack-o-connor/College/thirdyear/Cloud/data'
	 )
>>> os.getcwd()
'/home/jack-o-connor/College/thirdyear/Cloud/data'
>>> machine_plots = dict()
for filename in os.listdir():
    if filename[-4:] == ".csv":
        file = open(filename, 'r')
        lines = file.readlines()
        data = [line.strip().split(',') for line in lines[1:]]
        data = [[int(d[0]), int(d[1]), float(d[2])] for d in data]
        data = list(zip(*data))
        machine_plots[filename[:-4]] = data
        
SyntaxError: multiple statements found while compiling a single statement
>>> machine_plots = dict()
>>> 
for filename in os.listdir():
    if filename[-4:] == ".csv":
        file = open(filename, 'r')
        lines = file.readlines()
        data = [line.strip().split(',') for line in lines[1:]]
        data = [[int(d[0]), int(d[1]), float(d[2])] for d in data]
        data = list(zip(*data))
        machine_plots[filename[:-4]] = data

        
>>> machine_plots
{'local_machine_plots': [(50, 50, 50, 50, 50, 50, 50, 200, 200, 200, 200, 200, 200, 200, 400, 400, 400, 400, 400, 400, 400, 600, 600, 600, 600, 600, 600, 600, 800, 800, 800, 800, 800, 800, 800, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1200, 1200, 1200, 1200, 1200, 1200, 1200), (50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200), (0.01964, 0.31088, 1.24722, 2.71071, 4.75947, 7.44412, 10.67436, 0.06039, 0.94395, 3.73411, 8.1991, 14.62135, 22.74336, 37.66158, 0.11254, 1.77085, 7.0602, 15.53242, 27.89016, 48.71635, 70.75944, 0.16625, 2.60408, 11.23162, 22.94368, 42.5335, 64.31854, 98.00977, 0.21819, 3.67745, 13.5378, 30.27574, 53.84188, 89.34145, 131.35308, 0.28204, 4.41762, 16.7691, 38.327, 67.0808, 109.59754, 150.49293, 0.32479, 5.11013, 20.00427, 45.15577, 79.94417, 130.03795, 180.09032)], 'vm_plots': [(50, 50, 50, 50, 50, 50, 50, 200, 200, 200, 200, 200, 200, 200, 400, 400, 400, 400, 400, 400, 400, 600, 600, 600, 600, 600, 600, 600, 800, 800, 800, 800, 800, 800, 800, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1200, 1200, 1200, 1200, 1200, 1200, 1200), (50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200), (0.02081, 0.38495, 1.32784, 2.94257, 5.19837, 8.13086, 11.74828, 0.06404, 1.07619, 4.02143, 9.06626, 16.00024, 29.73211, 36.00166, 0.12375, 2.02868, 7.6232, 17.17082, 30.49575, 52.69623, 68.66921, 0.17873, 2.86543, 11.2267, 25.35328, 44.83247, 79.04148, 101.27951, 0.23915, 3.73648, 14.92091, 33.46767, 59.64934, 110.16818, 133.26169, 0.29962, 4.87824, 18.63628, 41.59115, 79.10883, 129.21861, 165.58878, 0.37319, 5.74802, 22.08516, 56.01615, 95.82643, 148.63193, 199.80641)], 'docker_plots': [(50, 50, 50, 50, 50, 50, 50, 200, 200, 200, 200, 200, 200, 200, 400, 400, 400, 400, 400, 400, 400, 600, 600, 600, 600, 600, 600, 600, 800, 800, 800, 800, 800, 800, 800, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1200, 1200, 1200, 1200, 1200, 1200, 1200), (50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200), (0.0325, 0.51964, 2.08345, 4.68891, 8.35079, 13.12754, 18.72711, 0.09889, 1.59926, 6.32096, 14.16808, 25.13728, 39.09821, 56.24825, 0.19873, 3.03911, 12.07946, 27.04739, 49.26928, 74.68974, 107.12655, 0.28883, 4.53776, 17.70403, 40.05794, 70.77222, 110.36971, 158.30655, 0.37444, 5.84587, 23.42207, 53.15077, 93.90385, 145.8633, 213.43777, 0.47357, 7.5212, 29.2527, 65.0468, 116.20199, 181.98376, 260.11497, 0.56384, 8.9609, 34.65029, 79.04085, 139.42766, 216.16956, 310.05135)], 'docker_priviliged_plots': [(50, 50, 50, 50, 50, 50, 50, 200, 200, 200, 200, 200, 200, 200, 400, 400, 400, 400, 400, 400, 400, 600, 600, 600, 600, 600, 600, 600, 800, 800, 800, 800, 800, 800, 800, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1200, 1200, 1200, 1200, 1200, 1200, 1200), (50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200, 50, 200, 400, 600, 800, 1000, 1200), (0.01848, 0.30113, 1.18603, 2.66286, 4.745, 7.46166, 10.68222, 0.05779, 0.91591, 3.66344, 8.15129, 14.50651, 22.60275, 32.68412, 0.11505, 1.72644, 6.89622, 15.53525, 27.5925, 42.93177, 61.99994, 0.16502, 2.56205, 10.23077, 23.00073, 40.85617, 63.82143, 91.66197, 0.21604, 3.38837, 13.44119, 30.19367, 53.99984, 84.219, 121.39065, 0.26816, 4.22918, 16.68988, 37.54133, 67.15384, 104.21508, 150.19395, 0.34504, 5.04491, 20.02146, 45.24986, 80.4279, 125.25664, 179.19719)]}
>>> machine_plots_tuples = dict()
>>> for filename in os.listdir():
    if filename[-4:] == ".csv":
        file = open(filename, 'r')
        lines = file.readlines()
        data = [line.strip().split(',') for line in lines[1:]]
        data = [[int(d[0]), int(d[1]), float(d[2])] for d in data]
        machine_plots[filename[:-4]] = data

        
>>> machine_plots_tuples
{}
>>> for filename in os.listdir():
    if filename[-4:] == ".csv":
        file = open(filename, 'r')
        lines = file.readlines()
        data = [line.strip().split(',') for line in lines[1:]]
        data = [[int(d[0]), int(d[1]), float(d[2])] for d in data]
        data = list(zip(*data))
        machine_plots[filename[:-4]] = data

        
>>> for filename in os.listdir():
    if filename[-4:] == ".csv":
        file = open(filename, 'r')
        lines = file.readlines()
        data = [line.strip().split(',') for line in lines[1:]]
        data = [[int(d[0]), int(d[1]), float(d[2])] for d in data]
        machine_plots_tuples[filename[:-4]] = data

        
>>> machine_plots_tuples
{'local_machine_plots': [[50, 50, 0.01964], [50, 200, 0.31088], [50, 400, 1.24722], [50, 600, 2.71071], [50, 800, 4.75947], [50, 1000, 7.44412], [50, 1200, 10.67436], [200, 50, 0.06039], [200, 200, 0.94395], [200, 400, 3.73411], [200, 600, 8.1991], [200, 800, 14.62135], [200, 1000, 22.74336], [200, 1200, 37.66158], [400, 50, 0.11254], [400, 200, 1.77085], [400, 400, 7.0602], [400, 600, 15.53242], [400, 800, 27.89016], [400, 1000, 48.71635], [400, 1200, 70.75944], [600, 50, 0.16625], [600, 200, 2.60408], [600, 400, 11.23162], [600, 600, 22.94368], [600, 800, 42.5335], [600, 1000, 64.31854], [600, 1200, 98.00977], [800, 50, 0.21819], [800, 200, 3.67745], [800, 400, 13.5378], [800, 600, 30.27574], [800, 800, 53.84188], [800, 1000, 89.34145], [800, 1200, 131.35308], [1000, 50, 0.28204], [1000, 200, 4.41762], [1000, 400, 16.7691], [1000, 600, 38.327], [1000, 800, 67.0808], [1000, 1000, 109.59754], [1000, 1200, 150.49293], [1200, 50, 0.32479], [1200, 200, 5.11013], [1200, 400, 20.00427], [1200, 600, 45.15577], [1200, 800, 79.94417], [1200, 1000, 130.03795], [1200, 1200, 180.09032]], 'vm_plots': [[50, 50, 0.02081], [50, 200, 0.38495], [50, 400, 1.32784], [50, 600, 2.94257], [50, 800, 5.19837], [50, 1000, 8.13086], [50, 1200, 11.74828], [200, 50, 0.06404], [200, 200, 1.07619], [200, 400, 4.02143], [200, 600, 9.06626], [200, 800, 16.00024], [200, 1000, 29.73211], [200, 1200, 36.00166], [400, 50, 0.12375], [400, 200, 2.02868], [400, 400, 7.6232], [400, 600, 17.17082], [400, 800, 30.49575], [400, 1000, 52.69623], [400, 1200, 68.66921], [600, 50, 0.17873], [600, 200, 2.86543], [600, 400, 11.2267], [600, 600, 25.35328], [600, 800, 44.83247], [600, 1000, 79.04148], [600, 1200, 101.27951], [800, 50, 0.23915], [800, 200, 3.73648], [800, 400, 14.92091], [800, 600, 33.46767], [800, 800, 59.64934], [800, 1000, 110.16818], [800, 1200, 133.26169], [1000, 50, 0.29962], [1000, 200, 4.87824], [1000, 400, 18.63628], [1000, 600, 41.59115], [1000, 800, 79.10883], [1000, 1000, 129.21861], [1000, 1200, 165.58878], [1200, 50, 0.37319], [1200, 200, 5.74802], [1200, 400, 22.08516], [1200, 600, 56.01615], [1200, 800, 95.82643], [1200, 1000, 148.63193], [1200, 1200, 199.80641]], 'docker_plots': [[50, 50, 0.0325], [50, 200, 0.51964], [50, 400, 2.08345], [50, 600, 4.68891], [50, 800, 8.35079], [50, 1000, 13.12754], [50, 1200, 18.72711], [200, 50, 0.09889], [200, 200, 1.59926], [200, 400, 6.32096], [200, 600, 14.16808], [200, 800, 25.13728], [200, 1000, 39.09821], [200, 1200, 56.24825], [400, 50, 0.19873], [400, 200, 3.03911], [400, 400, 12.07946], [400, 600, 27.04739], [400, 800, 49.26928], [400, 1000, 74.68974], [400, 1200, 107.12655], [600, 50, 0.28883], [600, 200, 4.53776], [600, 400, 17.70403], [600, 600, 40.05794], [600, 800, 70.77222], [600, 1000, 110.36971], [600, 1200, 158.30655], [800, 50, 0.37444], [800, 200, 5.84587], [800, 400, 23.42207], [800, 600, 53.15077], [800, 800, 93.90385], [800, 1000, 145.8633], [800, 1200, 213.43777], [1000, 50, 0.47357], [1000, 200, 7.5212], [1000, 400, 29.2527], [1000, 600, 65.0468], [1000, 800, 116.20199], [1000, 1000, 181.98376], [1000, 1200, 260.11497], [1200, 50, 0.56384], [1200, 200, 8.9609], [1200, 400, 34.65029], [1200, 600, 79.04085], [1200, 800, 139.42766], [1200, 1000, 216.16956], [1200, 1200, 310.05135]], 'docker_priviliged_plots': [[50, 50, 0.01848], [50, 200, 0.30113], [50, 400, 1.18603], [50, 600, 2.66286], [50, 800, 4.745], [50, 1000, 7.46166], [50, 1200, 10.68222], [200, 50, 0.05779], [200, 200, 0.91591], [200, 400, 3.66344], [200, 600, 8.15129], [200, 800, 14.50651], [200, 1000, 22.60275], [200, 1200, 32.68412], [400, 50, 0.11505], [400, 200, 1.72644], [400, 400, 6.89622], [400, 600, 15.53525], [400, 800, 27.5925], [400, 1000, 42.93177], [400, 1200, 61.99994], [600, 50, 0.16502], [600, 200, 2.56205], [600, 400, 10.23077], [600, 600, 23.00073], [600, 800, 40.85617], [600, 1000, 63.82143], [600, 1200, 91.66197], [800, 50, 0.21604], [800, 200, 3.38837], [800, 400, 13.44119], [800, 600, 30.19367], [800, 800, 53.99984], [800, 1000, 84.219], [800, 1200, 121.39065], [1000, 50, 0.26816], [1000, 200, 4.22918], [1000, 400, 16.68988], [1000, 600, 37.54133], [1000, 800, 67.15384], [1000, 1000, 104.21508], [1000, 1200, 150.19395], [1200, 50, 0.34504], [1200, 200, 5.04491], [1200, 400, 20.02146], [1200, 600, 45.24986], [1200, 800, 80.4279], [1200, 1000, 125.25664], [1200, 1200, 179.19719]]}
>>> from matplotlib import pyplot as plt
>>> differences = []
>>> differences = [[0 for i in range(len(machine_plots_tuples["local_machine_plots"]]
				 
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
>>> differences = [[0 for i in range(len(machine_plots_tuples["local_machine_plots"]))]

	
KeyboardInterrupt
>>> differences = [[0 for i in range(len(machine_plots_tuples["local_machine_plots"]))]]
>>> differences
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
>>> differences = [[(tuple[1][0], tuple[1][1], tuple[1][2] - tuple[0][1]] for tuple in zip(machine_plots_tuples['local_machine_plots'], machine_plots_tuples[key]]] for key in machine_plots_tuples.keys()]
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
>>> differences = [[(tuple[1][0], tuple[1][1], tuple[1][2] - tuple[0][1]] for tuple in zip(machine_plots_tuples['local_machine_plots'], machine_plots_tuples[key]]] for key in machine_plots_tuples.keys())]
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
>>> differences = [[(tuple[1][0], tuple[1][1], tuple[1][2] - tuple[0][1]) for tuple in zip(machine_plots_tuples['local_machine_plots'], machine_plots_tuples[key])] for key in machine_plots_tuples.keys()]
>>> differences
[[(50, 50, -49.98036), (50, 200, -199.68912), (50, 400, -398.75278), (50, 600, -597.28929), (50, 800, -795.24053), (50, 1000, -992.55588), (50, 1200, -1189.32564), (200, 50, -49.93961), (200, 200, -199.05605), (200, 400, -396.26589), (200, 600, -591.8009), (200, 800, -785.37865), (200, 1000, -977.25664), (200, 1200, -1162.33842), (400, 50, -49.88746), (400, 200, -198.22915), (400, 400, -392.9398), (400, 600, -584.46758), (400, 800, -772.10984), (400, 1000, -951.28365), (400, 1200, -1129.24056), (600, 50, -49.83375), (600, 200, -197.39592), (600, 400, -388.76838), (600, 600, -577.05632), (600, 800, -757.4665), (600, 1000, -935.68146), (600, 1200, -1101.9902299999999), (800, 50, -49.78181), (800, 200, -196.32255), (800, 400, -386.4622), (800, 600, -569.72426), (800, 800, -746.15812), (800, 1000, -910.65855), (800, 1200, -1068.64692), (1000, 50, -49.71796), (1000, 200, -195.58238), (1000, 400, -383.2309), (1000, 600, -561.673), (1000, 800, -732.9192), (1000, 1000, -890.40246), (1000, 1200, -1049.50707), (1200, 50, -49.67521), (1200, 200, -194.88987), (1200, 400, -379.99573), (1200, 600, -554.84423), (1200, 800, -720.05583), (1200, 1000, -869.96205), (1200, 1200, -1019.90968)], [(50, 50, -49.97919), (50, 200, -199.61505), (50, 400, -398.67216), (50, 600, -597.05743), (50, 800, -794.80163), (50, 1000, -991.86914), (50, 1200, -1188.25172), (200, 50, -49.93596), (200, 200, -198.92381), (200, 400, -395.97857), (200, 600, -590.93374), (200, 800, -783.99976), (200, 1000, -970.26789), (200, 1200, -1163.99834), (400, 50, -49.87625), (400, 200, -197.97132), (400, 400, -392.3768), (400, 600, -582.82918), (400, 800, -769.50425), (400, 1000, -947.30377), (400, 1200, -1131.33079), (600, 50, -49.82127), (600, 200, -197.13457), (600, 400, -388.7733), (600, 600, -574.64672), (600, 800, -755.1675299999999), (600, 1000, -920.95852), (600, 1200, -1098.72049), (800, 50, -49.76085), (800, 200, -196.26352), (800, 400, -385.07909), (800, 600, -566.53233), (800, 800, -740.35066), (800, 1000, -889.83182), (800, 1200, -1066.73831), (1000, 50, -49.70038), (1000, 200, -195.12176), (1000, 400, -381.36372), (1000, 600, -558.40885), (1000, 800, -720.89117), (1000, 1000, -870.78139), (1000, 1200, -1034.41122), (1200, 50, -49.62681), (1200, 200, -194.25198), (1200, 400, -377.91484), (1200, 600, -543.98385), (1200, 800, -704.17357), (1200, 1000, -851.36807), (1200, 1200, -1000.19359)], [(50, 50, -49.9675), (50, 200, -199.48036), (50, 400, -397.91655), (50, 600, -595.31109), (50, 800, -791.64921), (50, 1000, -986.87246), (50, 1200, -1181.27289), (200, 50, -49.90111), (200, 200, -198.40074), (200, 400, -393.67904), (200, 600, -585.83192), (200, 800, -774.86272), (200, 1000, -960.90179), (200, 1200, -1143.75175), (400, 50, -49.80127), (400, 200, -196.96089), (400, 400, -387.92054), (400, 600, -572.95261), (400, 800, -750.73072), (400, 1000, -925.31026), (400, 1200, -1092.87345), (600, 50, -49.71117), (600, 200, -195.46224), (600, 400, -382.29597), (600, 600, -559.94206), (600, 800, -729.2277799999999), (600, 1000, -889.6302900000001), (600, 1200, -1041.69345), (800, 50, -49.62556), (800, 200, -194.15413), (800, 400, -376.57793), (800, 600, -546.84923), (800, 800, -706.09615), (800, 1000, -854.1367), (800, 1200, -986.56223), (1000, 50, -49.52643), (1000, 200, -192.4788), (1000, 400, -370.7473), (1000, 600, -534.9532), (1000, 800, -683.79801), (1000, 1000, -818.01624), (1000, 1200, -939.8850299999999), (1200, 50, -49.43616), (1200, 200, -191.0391), (1200, 400, -365.34971), (1200, 600, -520.95915), (1200, 800, -660.5723399999999), (1200, 1000, -783.83044), (1200, 1200, -889.94865)], [(50, 50, -49.98152), (50, 200, -199.69887), (50, 400, -398.81397), (50, 600, -597.33714), (50, 800, -795.255), (50, 1000, -992.53834), (50, 1200, -1189.31778), (200, 50, -49.94221), (200, 200, -199.08409), (200, 400, -396.33656), (200, 600, -591.84871), (200, 800, -785.49349), (200, 1000, -977.39725), (200, 1200, -1167.31588), (400, 50, -49.88495), (400, 200, -198.27356), (400, 400, -393.10378000000003), (400, 600, -584.46475), (400, 800, -772.4075), (400, 1000, -957.06823), (400, 1200, -1138.00006), (600, 50, -49.83498), (600, 200, -197.43795), (600, 400, -389.76923), (600, 600, -576.99927), (600, 800, -759.14383), (600, 1000, -936.17857), (600, 1200, -1108.33803), (800, 50, -49.78396), (800, 200, -196.61163), (800, 400, -386.55881), (800, 600, -569.80633), (800, 800, -746.00016), (800, 1000, -915.781), (800, 1200, -1078.60935), (1000, 50, -49.73184), (1000, 200, -195.77082), (1000, 400, -383.31012), (1000, 600, -562.45867), (1000, 800, -732.84616), (1000, 1000, -895.78492), (1000, 1200, -1049.80605), (1200, 50, -49.65496), (1200, 200, -194.95509), (1200, 400, -379.97854), (1200, 600, -554.75014), (1200, 800, -719.5721), (1200, 1000, -874.7433599999999), (1200, 1200, -1020.80281)]]
>>> differences = {key: [(tuple[1][0], tuple[1][1], tuple[1][2] - tuple[0][1]) for tuple in zip(machine_plots_tuples['local_machine_plots'], machine_plots_tuples[key])] for key in machine_plots_tuples.keys()}
>>> differences
{'local_machine_plots': [(50, 50, -49.98036), (50, 200, -199.68912), (50, 400, -398.75278), (50, 600, -597.28929), (50, 800, -795.24053), (50, 1000, -992.55588), (50, 1200, -1189.32564), (200, 50, -49.93961), (200, 200, -199.05605), (200, 400, -396.26589), (200, 600, -591.8009), (200, 800, -785.37865), (200, 1000, -977.25664), (200, 1200, -1162.33842), (400, 50, -49.88746), (400, 200, -198.22915), (400, 400, -392.9398), (400, 600, -584.46758), (400, 800, -772.10984), (400, 1000, -951.28365), (400, 1200, -1129.24056), (600, 50, -49.83375), (600, 200, -197.39592), (600, 400, -388.76838), (600, 600, -577.05632), (600, 800, -757.4665), (600, 1000, -935.68146), (600, 1200, -1101.9902299999999), (800, 50, -49.78181), (800, 200, -196.32255), (800, 400, -386.4622), (800, 600, -569.72426), (800, 800, -746.15812), (800, 1000, -910.65855), (800, 1200, -1068.64692), (1000, 50, -49.71796), (1000, 200, -195.58238), (1000, 400, -383.2309), (1000, 600, -561.673), (1000, 800, -732.9192), (1000, 1000, -890.40246), (1000, 1200, -1049.50707), (1200, 50, -49.67521), (1200, 200, -194.88987), (1200, 400, -379.99573), (1200, 600, -554.84423), (1200, 800, -720.05583), (1200, 1000, -869.96205), (1200, 1200, -1019.90968)], 'vm_plots': [(50, 50, -49.97919), (50, 200, -199.61505), (50, 400, -398.67216), (50, 600, -597.05743), (50, 800, -794.80163), (50, 1000, -991.86914), (50, 1200, -1188.25172), (200, 50, -49.93596), (200, 200, -198.92381), (200, 400, -395.97857), (200, 600, -590.93374), (200, 800, -783.99976), (200, 1000, -970.26789), (200, 1200, -1163.99834), (400, 50, -49.87625), (400, 200, -197.97132), (400, 400, -392.3768), (400, 600, -582.82918), (400, 800, -769.50425), (400, 1000, -947.30377), (400, 1200, -1131.33079), (600, 50, -49.82127), (600, 200, -197.13457), (600, 400, -388.7733), (600, 600, -574.64672), (600, 800, -755.1675299999999), (600, 1000, -920.95852), (600, 1200, -1098.72049), (800, 50, -49.76085), (800, 200, -196.26352), (800, 400, -385.07909), (800, 600, -566.53233), (800, 800, -740.35066), (800, 1000, -889.83182), (800, 1200, -1066.73831), (1000, 50, -49.70038), (1000, 200, -195.12176), (1000, 400, -381.36372), (1000, 600, -558.40885), (1000, 800, -720.89117), (1000, 1000, -870.78139), (1000, 1200, -1034.41122), (1200, 50, -49.62681), (1200, 200, -194.25198), (1200, 400, -377.91484), (1200, 600, -543.98385), (1200, 800, -704.17357), (1200, 1000, -851.36807), (1200, 1200, -1000.19359)], 'docker_plots': [(50, 50, -49.9675), (50, 200, -199.48036), (50, 400, -397.91655), (50, 600, -595.31109), (50, 800, -791.64921), (50, 1000, -986.87246), (50, 1200, -1181.27289), (200, 50, -49.90111), (200, 200, -198.40074), (200, 400, -393.67904), (200, 600, -585.83192), (200, 800, -774.86272), (200, 1000, -960.90179), (200, 1200, -1143.75175), (400, 50, -49.80127), (400, 200, -196.96089), (400, 400, -387.92054), (400, 600, -572.95261), (400, 800, -750.73072), (400, 1000, -925.31026), (400, 1200, -1092.87345), (600, 50, -49.71117), (600, 200, -195.46224), (600, 400, -382.29597), (600, 600, -559.94206), (600, 800, -729.2277799999999), (600, 1000, -889.6302900000001), (600, 1200, -1041.69345), (800, 50, -49.62556), (800, 200, -194.15413), (800, 400, -376.57793), (800, 600, -546.84923), (800, 800, -706.09615), (800, 1000, -854.1367), (800, 1200, -986.56223), (1000, 50, -49.52643), (1000, 200, -192.4788), (1000, 400, -370.7473), (1000, 600, -534.9532), (1000, 800, -683.79801), (1000, 1000, -818.01624), (1000, 1200, -939.8850299999999), (1200, 50, -49.43616), (1200, 200, -191.0391), (1200, 400, -365.34971), (1200, 600, -520.95915), (1200, 800, -660.5723399999999), (1200, 1000, -783.83044), (1200, 1200, -889.94865)], 'docker_priviliged_plots': [(50, 50, -49.98152), (50, 200, -199.69887), (50, 400, -398.81397), (50, 600, -597.33714), (50, 800, -795.255), (50, 1000, -992.53834), (50, 1200, -1189.31778), (200, 50, -49.94221), (200, 200, -199.08409), (200, 400, -396.33656), (200, 600, -591.84871), (200, 800, -785.49349), (200, 1000, -977.39725), (200, 1200, -1167.31588), (400, 50, -49.88495), (400, 200, -198.27356), (400, 400, -393.10378000000003), (400, 600, -584.46475), (400, 800, -772.4075), (400, 1000, -957.06823), (400, 1200, -1138.00006), (600, 50, -49.83498), (600, 200, -197.43795), (600, 400, -389.76923), (600, 600, -576.99927), (600, 800, -759.14383), (600, 1000, -936.17857), (600, 1200, -1108.33803), (800, 50, -49.78396), (800, 200, -196.61163), (800, 400, -386.55881), (800, 600, -569.80633), (800, 800, -746.00016), (800, 1000, -915.781), (800, 1200, -1078.60935), (1000, 50, -49.73184), (1000, 200, -195.77082), (1000, 400, -383.31012), (1000, 600, -562.45867), (1000, 800, -732.84616), (1000, 1000, -895.78492), (1000, 1200, -1049.80605), (1200, 50, -49.65496), (1200, 200, -194.95509), (1200, 400, -379.97854), (1200, 600, -554.75014), (1200, 800, -719.5721), (1200, 1000, -874.7433599999999), (1200, 1200, -1020.80281)]}
>>> differences = {key: [(tuple[1][0], tuple[1][1], tuple[1][2] - tuple[0][2]) for tuple in zip(machine_plots_tuples['local_machine_plots'], machine_plots_tuples[key])] for key in machine_plots_tuples.keys()}
>>> differences
{'local_machine_plots': [(50, 50, 0.0), (50, 200, 0.0), (50, 400, 0.0), (50, 600, 0.0), (50, 800, 0.0), (50, 1000, 0.0), (50, 1200, 0.0), (200, 50, 0.0), (200, 200, 0.0), (200, 400, 0.0), (200, 600, 0.0), (200, 800, 0.0), (200, 1000, 0.0), (200, 1200, 0.0), (400, 50, 0.0), (400, 200, 0.0), (400, 400, 0.0), (400, 600, 0.0), (400, 800, 0.0), (400, 1000, 0.0), (400, 1200, 0.0), (600, 50, 0.0), (600, 200, 0.0), (600, 400, 0.0), (600, 600, 0.0), (600, 800, 0.0), (600, 1000, 0.0), (600, 1200, 0.0), (800, 50, 0.0), (800, 200, 0.0), (800, 400, 0.0), (800, 600, 0.0), (800, 800, 0.0), (800, 1000, 0.0), (800, 1200, 0.0), (1000, 50, 0.0), (1000, 200, 0.0), (1000, 400, 0.0), (1000, 600, 0.0), (1000, 800, 0.0), (1000, 1000, 0.0), (1000, 1200, 0.0), (1200, 50, 0.0), (1200, 200, 0.0), (1200, 400, 0.0), (1200, 600, 0.0), (1200, 800, 0.0), (1200, 1000, 0.0), (1200, 1200, 0.0)], 'vm_plots': [(50, 50, 0.0011699999999999974), (50, 200, 0.07407000000000002), (50, 400, 0.08061999999999991), (50, 600, 0.23185999999999973), (50, 800, 0.4388999999999994), (50, 1000, 0.6867400000000004), (50, 1200, 1.0739199999999993), (200, 50, 0.0036500000000000005), (200, 200, 0.13224000000000002), (200, 400, 0.2873199999999998), (200, 600, 0.8671600000000002), (200, 800, 1.378890000000002), (200, 1000, 6.98875), (200, 1200, -1.6599199999999996), (400, 50, 0.011209999999999998), (400, 200, 0.25783), (400, 400, 0.5629999999999997), (400, 600, 1.638399999999999), (400, 800, 2.6055899999999994), (400, 1000, 3.9798800000000014), (400, 1200, -2.090229999999991), (600, 50, 0.012479999999999991), (600, 200, 0.26134999999999975), (600, 400, -0.0049200000000002575), (600, 600, 2.409600000000001), (600, 800, 2.298970000000004), (600, 1000, 14.722940000000008), (600, 1200, 3.2697399999999988), (800, 50, 0.020960000000000006), (800, 200, 0.059029999999999916), (800, 400, 1.3831099999999985), (800, 600, 3.1919299999999993), (800, 800, 5.807459999999999), (800, 1000, 20.826730000000012), (800, 1200, 1.9086099999999817), (1000, 50, 0.017579999999999985), (1000, 200, 0.4606199999999996), (1000, 400, 1.8671799999999976), (1000, 600, 3.2641500000000008), (1000, 800, 12.028030000000001), (1000, 1000, 19.621070000000017), (1000, 1200, 15.095850000000013), (1200, 50, 0.0484), (1200, 200, 0.6378900000000005), (1200, 400, 2.0808899999999966), (1200, 600, 10.860380000000006), (1200, 800, 15.882260000000002), (1200, 1000, 18.593980000000016), (1200, 1200, 19.71609000000001)], 'docker_plots': [(50, 50, 0.01286), (50, 200, 0.20876), (50, 400, 0.83623), (50, 600, 1.9781999999999997), (50, 800, 3.5913199999999996), (50, 1000, 5.68342), (50, 1200, 8.05275), (200, 50, 0.038500000000000006), (200, 200, 0.65531), (200, 400, 2.5868500000000005), (200, 600, 5.96898), (200, 800, 10.51593), (200, 1000, 16.354850000000003), (200, 1200, 18.586669999999998), (400, 50, 0.08618999999999999), (400, 200, 1.26826), (400, 400, 5.019259999999999), (400, 600, 11.51497), (400, 800, 21.37912), (400, 1000, 25.973390000000002), (400, 1200, 36.36711), (600, 50, 0.12257999999999997), (600, 200, 1.9336799999999994), (600, 400, 6.47241), (600, 600, 17.11426), (600, 800, 28.238720000000008), (600, 1000, 46.05117), (600, 1200, 60.296779999999984), (800, 50, 0.15625), (800, 200, 2.16842), (800, 400, 9.88427), (800, 600, 22.875030000000002), (800, 800, 40.06197), (800, 1000, 56.521850000000015), (800, 1200, 82.08469), (1000, 50, 0.19152999999999998), (1000, 200, 3.10358), (1000, 400, 12.4836), (1000, 600, 26.719800000000006), (1000, 800, 49.12119), (1000, 1000, 72.38622), (1000, 1200, 109.62204000000003), (1200, 50, 0.23904999999999998), (1200, 200, 3.8507700000000007), (1200, 400, 14.646019999999996), (1200, 600, 33.88508000000001), (1200, 800, 59.48349), (1200, 1000, 86.13161), (1200, 1200, 129.96103000000002)], 'docker_priviliged_plots': [(50, 50, -0.0011600000000000013), (50, 200, -0.009749999999999981), (50, 400, -0.06119000000000008), (50, 600, -0.04785000000000039), (50, 800, -0.014470000000000205), (50, 1000, 0.017540000000000333), (50, 1200, 0.00785999999999909), (200, 50, -0.002599999999999998), (200, 200, -0.028039999999999954), (200, 400, -0.07066999999999979), (200, 600, -0.04781000000000013), (200, 800, -0.11483999999999916), (200, 1000, -0.1406099999999988), (200, 1200, -4.977460000000001), (400, 50, 0.0025099999999999983), (400, 200, -0.04441000000000006), (400, 400, -0.16398000000000046), (400, 600, 0.002829999999999444), (400, 800, -0.2976600000000005), (400, 1000, -5.784579999999998), (400, 1200, -8.759499999999996), (600, 50, -0.0012300000000000089), (600, 200, -0.04203000000000001), (600, 400, -1.0008499999999998), (600, 600, 0.05705000000000027), (600, 800, -1.6773299999999978), (600, 1000, -0.4971099999999993), (600, 1200, -6.3478000000000065), (800, 50, -0.0021499999999999853), (800, 200, -0.2890799999999998), (800, 400, -0.09661000000000008), (800, 600, -0.08206999999999809), (800, 800, 0.15795999999999566), (800, 1000, -5.122450000000001), (800, 1200, -9.962430000000012), (1000, 50, -0.013880000000000003), (1000, 200, -0.18843999999999994), (1000, 400, -0.07922000000000295), (1000, 600, -0.7856699999999961), (1000, 800, 0.07304000000000599), (1000, 1000, -5.382459999999995), (1000, 1200, -0.29898000000000025), (1200, 50, 0.02024999999999999), (1200, 200, -0.06522000000000006), (1200, 400, 0.017189999999999372), (1200, 600, 0.09409000000000134), (1200, 800, 0.4837299999999942), (1200, 1000, -4.781309999999991), (1200, 1200, -0.8931299999999851)]}
>>> fig = plt.figure()
>>> ax = plt.axes()
>>> plt.plot(str(differences.values()[:2]), differences.values()[2])
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#37>", line 1, in <module>
TypeError: 'dict_values' object is not subscriptable
>>> differences = {key: {(d[0], d[1]): d[2] for value in differences[key]} for key, value in differences}
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#38>", line 1, in <module>
  File "<pyshell#38>", line 1, in <dictcomp>
ValueError: too many values to unpack (expected 2)
>>> differences = {key: {(d[0], d[1]): d[2] for d in differences[key]} for key in differences}
>>> differences
{'local_machine_plots': {(50, 50): 0.0, (50, 200): 0.0, (50, 400): 0.0, (50, 600): 0.0, (50, 800): 0.0, (50, 1000): 0.0, (50, 1200): 0.0, (200, 50): 0.0, (200, 200): 0.0, (200, 400): 0.0, (200, 600): 0.0, (200, 800): 0.0, (200, 1000): 0.0, (200, 1200): 0.0, (400, 50): 0.0, (400, 200): 0.0, (400, 400): 0.0, (400, 600): 0.0, (400, 800): 0.0, (400, 1000): 0.0, (400, 1200): 0.0, (600, 50): 0.0, (600, 200): 0.0, (600, 400): 0.0, (600, 600): 0.0, (600, 800): 0.0, (600, 1000): 0.0, (600, 1200): 0.0, (800, 50): 0.0, (800, 200): 0.0, (800, 400): 0.0, (800, 600): 0.0, (800, 800): 0.0, (800, 1000): 0.0, (800, 1200): 0.0, (1000, 50): 0.0, (1000, 200): 0.0, (1000, 400): 0.0, (1000, 600): 0.0, (1000, 800): 0.0, (1000, 1000): 0.0, (1000, 1200): 0.0, (1200, 50): 0.0, (1200, 200): 0.0, (1200, 400): 0.0, (1200, 600): 0.0, (1200, 800): 0.0, (1200, 1000): 0.0, (1200, 1200): 0.0}, 'vm_plots': {(50, 50): 0.0011699999999999974, (50, 200): 0.07407000000000002, (50, 400): 0.08061999999999991, (50, 600): 0.23185999999999973, (50, 800): 0.4388999999999994, (50, 1000): 0.6867400000000004, (50, 1200): 1.0739199999999993, (200, 50): 0.0036500000000000005, (200, 200): 0.13224000000000002, (200, 400): 0.2873199999999998, (200, 600): 0.8671600000000002, (200, 800): 1.378890000000002, (200, 1000): 6.98875, (200, 1200): -1.6599199999999996, (400, 50): 0.011209999999999998, (400, 200): 0.25783, (400, 400): 0.5629999999999997, (400, 600): 1.638399999999999, (400, 800): 2.6055899999999994, (400, 1000): 3.9798800000000014, (400, 1200): -2.090229999999991, (600, 50): 0.012479999999999991, (600, 200): 0.26134999999999975, (600, 400): -0.0049200000000002575, (600, 600): 2.409600000000001, (600, 800): 2.298970000000004, (600, 1000): 14.722940000000008, (600, 1200): 3.2697399999999988, (800, 50): 0.020960000000000006, (800, 200): 0.059029999999999916, (800, 400): 1.3831099999999985, (800, 600): 3.1919299999999993, (800, 800): 5.807459999999999, (800, 1000): 20.826730000000012, (800, 1200): 1.9086099999999817, (1000, 50): 0.017579999999999985, (1000, 200): 0.4606199999999996, (1000, 400): 1.8671799999999976, (1000, 600): 3.2641500000000008, (1000, 800): 12.028030000000001, (1000, 1000): 19.621070000000017, (1000, 1200): 15.095850000000013, (1200, 50): 0.0484, (1200, 200): 0.6378900000000005, (1200, 400): 2.0808899999999966, (1200, 600): 10.860380000000006, (1200, 800): 15.882260000000002, (1200, 1000): 18.593980000000016, (1200, 1200): 19.71609000000001}, 'docker_plots': {(50, 50): 0.01286, (50, 200): 0.20876, (50, 400): 0.83623, (50, 600): 1.9781999999999997, (50, 800): 3.5913199999999996, (50, 1000): 5.68342, (50, 1200): 8.05275, (200, 50): 0.038500000000000006, (200, 200): 0.65531, (200, 400): 2.5868500000000005, (200, 600): 5.96898, (200, 800): 10.51593, (200, 1000): 16.354850000000003, (200, 1200): 18.586669999999998, (400, 50): 0.08618999999999999, (400, 200): 1.26826, (400, 400): 5.019259999999999, (400, 600): 11.51497, (400, 800): 21.37912, (400, 1000): 25.973390000000002, (400, 1200): 36.36711, (600, 50): 0.12257999999999997, (600, 200): 1.9336799999999994, (600, 400): 6.47241, (600, 600): 17.11426, (600, 800): 28.238720000000008, (600, 1000): 46.05117, (600, 1200): 60.296779999999984, (800, 50): 0.15625, (800, 200): 2.16842, (800, 400): 9.88427, (800, 600): 22.875030000000002, (800, 800): 40.06197, (800, 1000): 56.521850000000015, (800, 1200): 82.08469, (1000, 50): 0.19152999999999998, (1000, 200): 3.10358, (1000, 400): 12.4836, (1000, 600): 26.719800000000006, (1000, 800): 49.12119, (1000, 1000): 72.38622, (1000, 1200): 109.62204000000003, (1200, 50): 0.23904999999999998, (1200, 200): 3.8507700000000007, (1200, 400): 14.646019999999996, (1200, 600): 33.88508000000001, (1200, 800): 59.48349, (1200, 1000): 86.13161, (1200, 1200): 129.96103000000002}, 'docker_priviliged_plots': {(50, 50): -0.0011600000000000013, (50, 200): -0.009749999999999981, (50, 400): -0.06119000000000008, (50, 600): -0.04785000000000039, (50, 800): -0.014470000000000205, (50, 1000): 0.017540000000000333, (50, 1200): 0.00785999999999909, (200, 50): -0.002599999999999998, (200, 200): -0.028039999999999954, (200, 400): -0.07066999999999979, (200, 600): -0.04781000000000013, (200, 800): -0.11483999999999916, (200, 1000): -0.1406099999999988, (200, 1200): -4.977460000000001, (400, 50): 0.0025099999999999983, (400, 200): -0.04441000000000006, (400, 400): -0.16398000000000046, (400, 600): 0.002829999999999444, (400, 800): -0.2976600000000005, (400, 1000): -5.784579999999998, (400, 1200): -8.759499999999996, (600, 50): -0.0012300000000000089, (600, 200): -0.04203000000000001, (600, 400): -1.0008499999999998, (600, 600): 0.05705000000000027, (600, 800): -1.6773299999999978, (600, 1000): -0.4971099999999993, (600, 1200): -6.3478000000000065, (800, 50): -0.0021499999999999853, (800, 200): -0.2890799999999998, (800, 400): -0.09661000000000008, (800, 600): -0.08206999999999809, (800, 800): 0.15795999999999566, (800, 1000): -5.122450000000001, (800, 1200): -9.962430000000012, (1000, 50): -0.013880000000000003, (1000, 200): -0.18843999999999994, (1000, 400): -0.07922000000000295, (1000, 600): -0.7856699999999961, (1000, 800): 0.07304000000000599, (1000, 1000): -5.382459999999995, (1000, 1200): -0.29898000000000025, (1200, 50): 0.02024999999999999, (1200, 200): -0.06522000000000006, (1200, 400): 0.017189999999999372, (1200, 600): 0.09409000000000134, (1200, 800): 0.4837299999999942, (1200, 1000): -4.781309999999991, (1200, 1200): -0.8931299999999851}}
>>> plt.plot('ireration', 'time difference', differences['local_machine_plots'], 'k')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#42>", line 1, in <module>
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/pyplot.py", line 2761, in plot
    return gca().plot(
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_axes.py", line 1646, in plot
    lines = [*self._get_lines(*args, data=data, **kwargs)]
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 216, in __call__
    yield from self._plot_args(this, kwargs)
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 312, in _plot_args
    linestyle, marker, color = _process_plot_format(tup[-1])
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 104, in _process_plot_format
    raise ValueError(
ValueError: Unrecognized character t in format string
>>> plt.plot('ireration', 'time difference', data=differences['local_machine_plots'], 'k')
SyntaxError: positional argument follows keyword argument
>>> plt.plot('ireration', 'time difference', data=differences['local_machine_plots'], color='k')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#44>", line 1, in <module>
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/pyplot.py", line 2761, in plot
    return gca().plot(
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_axes.py", line 1646, in plot
    lines = [*self._get_lines(*args, data=data, **kwargs)]
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 216, in __call__
    yield from self._plot_args(this, kwargs)
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 312, in _plot_args
    linestyle, marker, color = _process_plot_format(tup[-1])
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 104, in _process_plot_format
    raise ValueError(
ValueError: Unrecognized character t in format string
>>> plt.plot('ireration', 'time difference', data=differences['local_machine_plots'], color='black')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#45>", line 1, in <module>
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/pyplot.py", line 2761, in plot
    return gca().plot(
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_axes.py", line 1646, in plot
    lines = [*self._get_lines(*args, data=data, **kwargs)]
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 216, in __call__
    yield from self._plot_args(this, kwargs)
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 312, in _plot_args
    linestyle, marker, color = _process_plot_format(tup[-1])
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 104, in _process_plot_format
    raise ValueError(
ValueError: Unrecognized character t in format string
>>> plt.plot('ireration', 'time difference', data=differences['local_machine_plots'], color='green')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#46>", line 1, in <module>
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/pyplot.py", line 2761, in plot
    return gca().plot(
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_axes.py", line 1646, in plot
    lines = [*self._get_lines(*args, data=data, **kwargs)]
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 216, in __call__
    yield from self._plot_args(this, kwargs)
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 312, in _plot_args
    linestyle, marker, color = _process_plot_format(tup[-1])
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 104, in _process_plot_format
    raise ValueError(
ValueError: Unrecognized character t in format string
>>> plt.plot(differences['local_machine_plots'], 'k')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#49>", line 1, in <module>
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/pyplot.py", line 2761, in plot
    return gca().plot(
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_axes.py", line 1648, in plot
    self.add_line(line)
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 1850, in add_line
    self._update_line_limits(line)
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 1872, in _update_line_limits
    path = line.get_path()
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/lines.py", line 1027, in get_path
    self.recache()
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/lines.py", line 675, in recache
    y = _to_unmasked_float_array(yconv).ravel()
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/cbook/__init__.py", line 1317, in _to_unmasked_float_array
    return np.asarray(x, float)
  File "/home/jack-o-connor/.local/lib/python3.8/site-packages/numpy/core/_asarray.py", line 83, in asarray
    return array(a, dtype, copy=False, order=order)
TypeError: float() argument must be a string or a number, not 'dict'
>>> plt.plot([d[1] for d in differences['local_machine_plots']], 'k')
[<matplotlib.lines.Line2D object at 0x7f71580227f0>]
>>> plt.close()
>>> fig
<Figure size 1280x960 with 1 Axes>
>>> fig.close()
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#53>", line 1, in <module>
AttributeError: 'Figure' object has no attribute 'close'
>>> fig.clear()
>>> fig
<Figure size 1280x960 with 0 Axes>
>>> ax
<matplotlib.axes._subplots.AxesSubplot object at 0x7f715f3b5f40>
>>> ax.clear()
>>> ax
<matplotlib.axes._subplots.AxesSubplot object at 0x7f715f3b5f40>
>>> plt.plot([d[1] for d in differences['local_machine_plots']], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713e3e87f0>]
>>> plt.plot([d[1] for d in differences['vm_plots']], 'k', label='vm')
[<matplotlib.lines.Line2D object at 0x7f713e3e8b80>]
>>> fig.clear()
>>> fig
<Figure size 1280x960 with 0 Axes>
>>> plt.plot([d[1] for d in differences['local_machine_plots']], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713e3e8ee0>]
>>> plt.plot([d[1] for d in differences['vm_plots']], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f713e376280>]
>>> plt.plot([d[1] for d in differences['docker_plots']], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f713e3765e0>]
>>> plt.plot([d[1] for d in differences['docker_priviliged_plots']], 'b', label='priviliged_docker')
[<matplotlib.lines.Line2D object at 0x7f713e376940>]
>>> plt.legend()
<matplotlib.legend.Legend object at 0x7f713e426f40>
>>> plt.show()
>>> differences
{'local_machine_plots': {(50, 50): 0.0, (50, 200): 0.0, (50, 400): 0.0, (50, 600): 0.0, (50, 800): 0.0, (50, 1000): 0.0, (50, 1200): 0.0, (200, 50): 0.0, (200, 200): 0.0, (200, 400): 0.0, (200, 600): 0.0, (200, 800): 0.0, (200, 1000): 0.0, (200, 1200): 0.0, (400, 50): 0.0, (400, 200): 0.0, (400, 400): 0.0, (400, 600): 0.0, (400, 800): 0.0, (400, 1000): 0.0, (400, 1200): 0.0, (600, 50): 0.0, (600, 200): 0.0, (600, 400): 0.0, (600, 600): 0.0, (600, 800): 0.0, (600, 1000): 0.0, (600, 1200): 0.0, (800, 50): 0.0, (800, 200): 0.0, (800, 400): 0.0, (800, 600): 0.0, (800, 800): 0.0, (800, 1000): 0.0, (800, 1200): 0.0, (1000, 50): 0.0, (1000, 200): 0.0, (1000, 400): 0.0, (1000, 600): 0.0, (1000, 800): 0.0, (1000, 1000): 0.0, (1000, 1200): 0.0, (1200, 50): 0.0, (1200, 200): 0.0, (1200, 400): 0.0, (1200, 600): 0.0, (1200, 800): 0.0, (1200, 1000): 0.0, (1200, 1200): 0.0}, 'vm_plots': {(50, 50): 0.0011699999999999974, (50, 200): 0.07407000000000002, (50, 400): 0.08061999999999991, (50, 600): 0.23185999999999973, (50, 800): 0.4388999999999994, (50, 1000): 0.6867400000000004, (50, 1200): 1.0739199999999993, (200, 50): 0.0036500000000000005, (200, 200): 0.13224000000000002, (200, 400): 0.2873199999999998, (200, 600): 0.8671600000000002, (200, 800): 1.378890000000002, (200, 1000): 6.98875, (200, 1200): -1.6599199999999996, (400, 50): 0.011209999999999998, (400, 200): 0.25783, (400, 400): 0.5629999999999997, (400, 600): 1.638399999999999, (400, 800): 2.6055899999999994, (400, 1000): 3.9798800000000014, (400, 1200): -2.090229999999991, (600, 50): 0.012479999999999991, (600, 200): 0.26134999999999975, (600, 400): -0.0049200000000002575, (600, 600): 2.409600000000001, (600, 800): 2.298970000000004, (600, 1000): 14.722940000000008, (600, 1200): 3.2697399999999988, (800, 50): 0.020960000000000006, (800, 200): 0.059029999999999916, (800, 400): 1.3831099999999985, (800, 600): 3.1919299999999993, (800, 800): 5.807459999999999, (800, 1000): 20.826730000000012, (800, 1200): 1.9086099999999817, (1000, 50): 0.017579999999999985, (1000, 200): 0.4606199999999996, (1000, 400): 1.8671799999999976, (1000, 600): 3.2641500000000008, (1000, 800): 12.028030000000001, (1000, 1000): 19.621070000000017, (1000, 1200): 15.095850000000013, (1200, 50): 0.0484, (1200, 200): 0.6378900000000005, (1200, 400): 2.0808899999999966, (1200, 600): 10.860380000000006, (1200, 800): 15.882260000000002, (1200, 1000): 18.593980000000016, (1200, 1200): 19.71609000000001}, 'docker_plots': {(50, 50): 0.01286, (50, 200): 0.20876, (50, 400): 0.83623, (50, 600): 1.9781999999999997, (50, 800): 3.5913199999999996, (50, 1000): 5.68342, (50, 1200): 8.05275, (200, 50): 0.038500000000000006, (200, 200): 0.65531, (200, 400): 2.5868500000000005, (200, 600): 5.96898, (200, 800): 10.51593, (200, 1000): 16.354850000000003, (200, 1200): 18.586669999999998, (400, 50): 0.08618999999999999, (400, 200): 1.26826, (400, 400): 5.019259999999999, (400, 600): 11.51497, (400, 800): 21.37912, (400, 1000): 25.973390000000002, (400, 1200): 36.36711, (600, 50): 0.12257999999999997, (600, 200): 1.9336799999999994, (600, 400): 6.47241, (600, 600): 17.11426, (600, 800): 28.238720000000008, (600, 1000): 46.05117, (600, 1200): 60.296779999999984, (800, 50): 0.15625, (800, 200): 2.16842, (800, 400): 9.88427, (800, 600): 22.875030000000002, (800, 800): 40.06197, (800, 1000): 56.521850000000015, (800, 1200): 82.08469, (1000, 50): 0.19152999999999998, (1000, 200): 3.10358, (1000, 400): 12.4836, (1000, 600): 26.719800000000006, (1000, 800): 49.12119, (1000, 1000): 72.38622, (1000, 1200): 109.62204000000003, (1200, 50): 0.23904999999999998, (1200, 200): 3.8507700000000007, (1200, 400): 14.646019999999996, (1200, 600): 33.88508000000001, (1200, 800): 59.48349, (1200, 1000): 86.13161, (1200, 1200): 129.96103000000002}, 'docker_priviliged_plots': {(50, 50): -0.0011600000000000013, (50, 200): -0.009749999999999981, (50, 400): -0.06119000000000008, (50, 600): -0.04785000000000039, (50, 800): -0.014470000000000205, (50, 1000): 0.017540000000000333, (50, 1200): 0.00785999999999909, (200, 50): -0.002599999999999998, (200, 200): -0.028039999999999954, (200, 400): -0.07066999999999979, (200, 600): -0.04781000000000013, (200, 800): -0.11483999999999916, (200, 1000): -0.1406099999999988, (200, 1200): -4.977460000000001, (400, 50): 0.0025099999999999983, (400, 200): -0.04441000000000006, (400, 400): -0.16398000000000046, (400, 600): 0.002829999999999444, (400, 800): -0.2976600000000005, (400, 1000): -5.784579999999998, (400, 1200): -8.759499999999996, (600, 50): -0.0012300000000000089, (600, 200): -0.04203000000000001, (600, 400): -1.0008499999999998, (600, 600): 0.05705000000000027, (600, 800): -1.6773299999999978, (600, 1000): -0.4971099999999993, (600, 1200): -6.3478000000000065, (800, 50): -0.0021499999999999853, (800, 200): -0.2890799999999998, (800, 400): -0.09661000000000008, (800, 600): -0.08206999999999809, (800, 800): 0.15795999999999566, (800, 1000): -5.122450000000001, (800, 1200): -9.962430000000012, (1000, 50): -0.013880000000000003, (1000, 200): -0.18843999999999994, (1000, 400): -0.07922000000000295, (1000, 600): -0.7856699999999961, (1000, 800): 0.07304000000000599, (1000, 1000): -5.382459999999995, (1000, 1200): -0.29898000000000025, (1200, 50): 0.02024999999999999, (1200, 200): -0.06522000000000006, (1200, 400): 0.017189999999999372, (1200, 600): 0.09409000000000134, (1200, 800): 0.4837299999999942, (1200, 1000): -4.781309999999991, (1200, 1200): -0.8931299999999851}}
>>> plt.close()
>>> plt
<module 'matplotlib.pyplot' from '/home/jack-o-connor/.local/lib/python3.8/site-packages/matplotlib/pyplot.py'>
>>> plt.figure
<function figure at 0x7f715e751b80>
>>> plt.close()
>>> fig
<Figure size 1280x960 with 0 Axes>
>>> fig.close()
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#75>", line 1, in <module>
AttributeError: 'Figure' object has no attribute 'close'
>>> plt.close('all')
>>> fig
<Figure size 1280x960 with 0 Axes>
>>> plt.clf()
>>> plt.cla()
>>> ls
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#80>", line 1, in <module>
NameError: name 'ls' is not defined
>>> fig
<Figure size 1280x960 with 0 Axes>
>>> plt.plot([d[1] for d in differences['local_machine_plots']], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713c0de670>]
>>> plt.show()
>>> fig.clf()
>>> plt.show()
>>> plt.plot([d[2] for d in differences['local_machine_plots']], 'k', label='local_machine')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#86>", line 1, in <module>
  File "<pyshell#86>", line 1, in <listcomp>
IndexError: tuple index out of range
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713c0b4070>]
>>> plt.show()
>>> plt.plot([d for d in differences['vm_plots'].values()], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f713c07af70>]
>>> plt.show()
>>> plt.show()
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713c053ca0>]
>>> plt.plot([d for d in differences['vm_plots'].values()], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f7130380040>]
>>> plt.plot([d for d in differences['docker_plots'].values()], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f71303803a0>]
>>> plt.plot([d for d in differences['docker_priviliged_plots'].values()], 'o', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f7130380700>]
>>> plt.savefig('differences_plot.png')
>>> plt.show()
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f7130150910>]
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f7130150c70>]
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f7130150fd0>]
>>> plt.show()
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f7130126af0>]
>>> plt.plot([d for d in differences['vm_plots'].values()], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f7130126e50>]
>>> plt.plot([d for d in differences['docker_plots'].values()], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f71301331f0>]
>>> plt.plot([d for d in differences['docker_priviliged_plots'].values()], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f7130133550>]
>>> plt.savefig('differences_plot.png')
>>> plt.show()
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713008a7c0>]
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713008ab20>]
>>> plt.show()
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713005e670>]
>>> plt.plot([d for d in differences['vm_plots'].values()], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f713005e9d0>]
>>> plt.plot([d for d in differences['docker_plots'].values()], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f713005ed60>]
>>> plt.plot([d for d in differences['docker_priviliged_plots'].values()], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f7130069100>]
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.legend()
<matplotlib.legend.Legend object at 0x7f713005ec10>
>>> plt.xlabel('plots')
Text(0.5, 0, 'plots')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.savefig('differences_plot.png')
>>> machine_plots_tuples
{'local_machine_plots': [[50, 50, 0.01964], [50, 200, 0.31088], [50, 400, 1.24722], [50, 600, 2.71071], [50, 800, 4.75947], [50, 1000, 7.44412], [50, 1200, 10.67436], [200, 50, 0.06039], [200, 200, 0.94395], [200, 400, 3.73411], [200, 600, 8.1991], [200, 800, 14.62135], [200, 1000, 22.74336], [200, 1200, 37.66158], [400, 50, 0.11254], [400, 200, 1.77085], [400, 400, 7.0602], [400, 600, 15.53242], [400, 800, 27.89016], [400, 1000, 48.71635], [400, 1200, 70.75944], [600, 50, 0.16625], [600, 200, 2.60408], [600, 400, 11.23162], [600, 600, 22.94368], [600, 800, 42.5335], [600, 1000, 64.31854], [600, 1200, 98.00977], [800, 50, 0.21819], [800, 200, 3.67745], [800, 400, 13.5378], [800, 600, 30.27574], [800, 800, 53.84188], [800, 1000, 89.34145], [800, 1200, 131.35308], [1000, 50, 0.28204], [1000, 200, 4.41762], [1000, 400, 16.7691], [1000, 600, 38.327], [1000, 800, 67.0808], [1000, 1000, 109.59754], [1000, 1200, 150.49293], [1200, 50, 0.32479], [1200, 200, 5.11013], [1200, 400, 20.00427], [1200, 600, 45.15577], [1200, 800, 79.94417], [1200, 1000, 130.03795], [1200, 1200, 180.09032]], 'vm_plots': [[50, 50, 0.02081], [50, 200, 0.38495], [50, 400, 1.32784], [50, 600, 2.94257], [50, 800, 5.19837], [50, 1000, 8.13086], [50, 1200, 11.74828], [200, 50, 0.06404], [200, 200, 1.07619], [200, 400, 4.02143], [200, 600, 9.06626], [200, 800, 16.00024], [200, 1000, 29.73211], [200, 1200, 36.00166], [400, 50, 0.12375], [400, 200, 2.02868], [400, 400, 7.6232], [400, 600, 17.17082], [400, 800, 30.49575], [400, 1000, 52.69623], [400, 1200, 68.66921], [600, 50, 0.17873], [600, 200, 2.86543], [600, 400, 11.2267], [600, 600, 25.35328], [600, 800, 44.83247], [600, 1000, 79.04148], [600, 1200, 101.27951], [800, 50, 0.23915], [800, 200, 3.73648], [800, 400, 14.92091], [800, 600, 33.46767], [800, 800, 59.64934], [800, 1000, 110.16818], [800, 1200, 133.26169], [1000, 50, 0.29962], [1000, 200, 4.87824], [1000, 400, 18.63628], [1000, 600, 41.59115], [1000, 800, 79.10883], [1000, 1000, 129.21861], [1000, 1200, 165.58878], [1200, 50, 0.37319], [1200, 200, 5.74802], [1200, 400, 22.08516], [1200, 600, 56.01615], [1200, 800, 95.82643], [1200, 1000, 148.63193], [1200, 1200, 199.80641]], 'docker_plots': [[50, 50, 0.0325], [50, 200, 0.51964], [50, 400, 2.08345], [50, 600, 4.68891], [50, 800, 8.35079], [50, 1000, 13.12754], [50, 1200, 18.72711], [200, 50, 0.09889], [200, 200, 1.59926], [200, 400, 6.32096], [200, 600, 14.16808], [200, 800, 25.13728], [200, 1000, 39.09821], [200, 1200, 56.24825], [400, 50, 0.19873], [400, 200, 3.03911], [400, 400, 12.07946], [400, 600, 27.04739], [400, 800, 49.26928], [400, 1000, 74.68974], [400, 1200, 107.12655], [600, 50, 0.28883], [600, 200, 4.53776], [600, 400, 17.70403], [600, 600, 40.05794], [600, 800, 70.77222], [600, 1000, 110.36971], [600, 1200, 158.30655], [800, 50, 0.37444], [800, 200, 5.84587], [800, 400, 23.42207], [800, 600, 53.15077], [800, 800, 93.90385], [800, 1000, 145.8633], [800, 1200, 213.43777], [1000, 50, 0.47357], [1000, 200, 7.5212], [1000, 400, 29.2527], [1000, 600, 65.0468], [1000, 800, 116.20199], [1000, 1000, 181.98376], [1000, 1200, 260.11497], [1200, 50, 0.56384], [1200, 200, 8.9609], [1200, 400, 34.65029], [1200, 600, 79.04085], [1200, 800, 139.42766], [1200, 1000, 216.16956], [1200, 1200, 310.05135]], 'docker_priviliged_plots': [[50, 50, 0.01848], [50, 200, 0.30113], [50, 400, 1.18603], [50, 600, 2.66286], [50, 800, 4.745], [50, 1000, 7.46166], [50, 1200, 10.68222], [200, 50, 0.05779], [200, 200, 0.91591], [200, 400, 3.66344], [200, 600, 8.15129], [200, 800, 14.50651], [200, 1000, 22.60275], [200, 1200, 32.68412], [400, 50, 0.11505], [400, 200, 1.72644], [400, 400, 6.89622], [400, 600, 15.53525], [400, 800, 27.5925], [400, 1000, 42.93177], [400, 1200, 61.99994], [600, 50, 0.16502], [600, 200, 2.56205], [600, 400, 10.23077], [600, 600, 23.00073], [600, 800, 40.85617], [600, 1000, 63.82143], [600, 1200, 91.66197], [800, 50, 0.21604], [800, 200, 3.38837], [800, 400, 13.44119], [800, 600, 30.19367], [800, 800, 53.99984], [800, 1000, 84.219], [800, 1200, 121.39065], [1000, 50, 0.26816], [1000, 200, 4.22918], [1000, 400, 16.68988], [1000, 600, 37.54133], [1000, 800, 67.15384], [1000, 1000, 104.21508], [1000, 1200, 150.19395], [1200, 50, 0.34504], [1200, 200, 5.04491], [1200, 400, 20.02146], [1200, 600, 45.24986], [1200, 800, 80.4279], [1200, 1000, 125.25664], [1200, 1200, 179.19719]]}
>>> for key, value in machine_plots_tuples.items():
	machine_plots_tuples[key] = sorted(value, key=lambda x: x[2])

	
>>> differences['vm_plots']
{(50, 50): 0.0011699999999999974, (50, 200): 0.07407000000000002, (50, 400): 0.08061999999999991, (50, 600): 0.23185999999999973, (50, 800): 0.4388999999999994, (50, 1000): 0.6867400000000004, (50, 1200): 1.0739199999999993, (200, 50): 0.0036500000000000005, (200, 200): 0.13224000000000002, (200, 400): 0.2873199999999998, (200, 600): 0.8671600000000002, (200, 800): 1.378890000000002, (200, 1000): 6.98875, (200, 1200): -1.6599199999999996, (400, 50): 0.011209999999999998, (400, 200): 0.25783, (400, 400): 0.5629999999999997, (400, 600): 1.638399999999999, (400, 800): 2.6055899999999994, (400, 1000): 3.9798800000000014, (400, 1200): -2.090229999999991, (600, 50): 0.012479999999999991, (600, 200): 0.26134999999999975, (600, 400): -0.0049200000000002575, (600, 600): 2.409600000000001, (600, 800): 2.298970000000004, (600, 1000): 14.722940000000008, (600, 1200): 3.2697399999999988, (800, 50): 0.020960000000000006, (800, 200): 0.059029999999999916, (800, 400): 1.3831099999999985, (800, 600): 3.1919299999999993, (800, 800): 5.807459999999999, (800, 1000): 20.826730000000012, (800, 1200): 1.9086099999999817, (1000, 50): 0.017579999999999985, (1000, 200): 0.4606199999999996, (1000, 400): 1.8671799999999976, (1000, 600): 3.2641500000000008, (1000, 800): 12.028030000000001, (1000, 1000): 19.621070000000017, (1000, 1200): 15.095850000000013, (1200, 50): 0.0484, (1200, 200): 0.6378900000000005, (1200, 400): 2.0808899999999966, (1200, 600): 10.860380000000006, (1200, 800): 15.882260000000002, (1200, 1000): 18.593980000000016, (1200, 1200): 19.71609000000001}
>>> differences = {key: sorted([value for k, v in value.items()] for key, value in differences.items()}
	       
SyntaxError: closing parenthesis '}' does not match opening parenthesis '('
>>> differences = {key: sorted([value for k, v in value.items()]) for key, value in differences.items()}
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#126>", line 1, in <module>
  File "<pyshell#126>", line 1, in <dictcomp>
TypeError: '<' not supported between instances of 'dict' and 'dict'
>>> differences = {key: sorted([v for k, v in value.items()]) for key, value in differences.items()}
>>> diffrerences
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#128>", line 1, in <module>
NameError: name 'diffrerences' is not defined
>>> differences
{'local_machine_plots': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'vm_plots': [-2.090229999999991, -1.6599199999999996, -0.0049200000000002575, 0.0011699999999999974, 0.0036500000000000005, 0.011209999999999998, 0.012479999999999991, 0.017579999999999985, 0.020960000000000006, 0.0484, 0.059029999999999916, 0.07407000000000002, 0.08061999999999991, 0.13224000000000002, 0.23185999999999973, 0.25783, 0.26134999999999975, 0.2873199999999998, 0.4388999999999994, 0.4606199999999996, 0.5629999999999997, 0.6378900000000005, 0.6867400000000004, 0.8671600000000002, 1.0739199999999993, 1.378890000000002, 1.3831099999999985, 1.638399999999999, 1.8671799999999976, 1.9086099999999817, 2.0808899999999966, 2.298970000000004, 2.409600000000001, 2.6055899999999994, 3.1919299999999993, 3.2641500000000008, 3.2697399999999988, 3.9798800000000014, 5.807459999999999, 6.98875, 10.860380000000006, 12.028030000000001, 14.722940000000008, 15.095850000000013, 15.882260000000002, 18.593980000000016, 19.621070000000017, 19.71609000000001, 20.826730000000012], 'docker_plots': [0.01286, 0.038500000000000006, 0.08618999999999999, 0.12257999999999997, 0.15625, 0.19152999999999998, 0.20876, 0.23904999999999998, 0.65531, 0.83623, 1.26826, 1.9336799999999994, 1.9781999999999997, 2.16842, 2.5868500000000005, 3.10358, 3.5913199999999996, 3.8507700000000007, 5.019259999999999, 5.68342, 5.96898, 6.47241, 8.05275, 9.88427, 10.51593, 11.51497, 12.4836, 14.646019999999996, 16.354850000000003, 17.11426, 18.586669999999998, 21.37912, 22.875030000000002, 25.973390000000002, 26.719800000000006, 28.238720000000008, 33.88508000000001, 36.36711, 40.06197, 46.05117, 49.12119, 56.521850000000015, 59.48349, 60.296779999999984, 72.38622, 82.08469, 86.13161, 109.62204000000003, 129.96103000000002], 'docker_priviliged_plots': [-9.962430000000012, -8.759499999999996, -6.3478000000000065, -5.784579999999998, -5.382459999999995, -5.122450000000001, -4.977460000000001, -4.781309999999991, -1.6773299999999978, -1.0008499999999998, -0.8931299999999851, -0.7856699999999961, -0.4971099999999993, -0.29898000000000025, -0.2976600000000005, -0.2890799999999998, -0.18843999999999994, -0.16398000000000046, -0.1406099999999988, -0.11483999999999916, -0.09661000000000008, -0.08206999999999809, -0.07922000000000295, -0.07066999999999979, -0.06522000000000006, -0.06119000000000008, -0.04785000000000039, -0.04781000000000013, -0.04441000000000006, -0.04203000000000001, -0.028039999999999954, -0.014470000000000205, -0.013880000000000003, -0.009749999999999981, -0.002599999999999998, -0.0021499999999999853, -0.0012300000000000089, -0.0011600000000000013, 0.0025099999999999983, 0.002829999999999444, 0.00785999999999909, 0.017189999999999372, 0.017540000000000333, 0.02024999999999999, 0.05705000000000027, 0.07304000000000599, 0.09409000000000134, 0.15795999999999566, 0.4837299999999942]}
>>> plt.plot([differences['local_machine_plots'].values(), 'k', label='local_machine')
	 
SyntaxError: invalid syntax
>>> plt.plot(differences['local_machine_plots'].values(), 'k', label='local_machine')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#131>", line 1, in <module>
AttributeError: 'list' object has no attribute 'values'
>>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f712a696f10>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f712a66a220>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f712a68a490>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f712a68a7c0>]
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 47.04444444444444, 'plots')
>>> plt.ylabel('seconds')
Text(76.31944444444443, 0.5, 'seconds')
>>> plt.savefig('sorted time_differences.png')
>>> plt.show()
>>> plt.show()
>>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f712a64ea00>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f712a64ed60>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f712a65d100>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f712a65d460>]
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 0, 'plots')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.savefig('sorted time_differences.png')
>>> plt.show()
>>> machine_plots_tuples
{'local_machine_plots': [[50, 50, 0.01964], [200, 50, 0.06039], [400, 50, 0.11254], [600, 50, 0.16625], [800, 50, 0.21819], [1000, 50, 0.28204], [50, 200, 0.31088], [1200, 50, 0.32479], [200, 200, 0.94395], [50, 400, 1.24722], [400, 200, 1.77085], [600, 200, 2.60408], [50, 600, 2.71071], [800, 200, 3.67745], [200, 400, 3.73411], [1000, 200, 4.41762], [50, 800, 4.75947], [1200, 200, 5.11013], [400, 400, 7.0602], [50, 1000, 7.44412], [200, 600, 8.1991], [50, 1200, 10.67436], [600, 400, 11.23162], [800, 400, 13.5378], [200, 800, 14.62135], [400, 600, 15.53242], [1000, 400, 16.7691], [1200, 400, 20.00427], [200, 1000, 22.74336], [600, 600, 22.94368], [400, 800, 27.89016], [800, 600, 30.27574], [200, 1200, 37.66158], [1000, 600, 38.327], [600, 800, 42.5335], [1200, 600, 45.15577], [400, 1000, 48.71635], [800, 800, 53.84188], [600, 1000, 64.31854], [1000, 800, 67.0808], [400, 1200, 70.75944], [1200, 800, 79.94417], [800, 1000, 89.34145], [600, 1200, 98.00977], [1000, 1000, 109.59754], [1200, 1000, 130.03795], [800, 1200, 131.35308], [1000, 1200, 150.49293], [1200, 1200, 180.09032]], 'vm_plots': [[50, 50, 0.02081], [200, 50, 0.06404], [400, 50, 0.12375], [600, 50, 0.17873], [800, 50, 0.23915], [1000, 50, 0.29962], [1200, 50, 0.37319], [50, 200, 0.38495], [200, 200, 1.07619], [50, 400, 1.32784], [400, 200, 2.02868], [600, 200, 2.86543], [50, 600, 2.94257], [800, 200, 3.73648], [200, 400, 4.02143], [1000, 200, 4.87824], [50, 800, 5.19837], [1200, 200, 5.74802], [400, 400, 7.6232], [50, 1000, 8.13086], [200, 600, 9.06626], [600, 400, 11.2267], [50, 1200, 11.74828], [800, 400, 14.92091], [200, 800, 16.00024], [400, 600, 17.17082], [1000, 400, 18.63628], [1200, 400, 22.08516], [600, 600, 25.35328], [200, 1000, 29.73211], [400, 800, 30.49575], [800, 600, 33.46767], [200, 1200, 36.00166], [1000, 600, 41.59115], [600, 800, 44.83247], [400, 1000, 52.69623], [1200, 600, 56.01615], [800, 800, 59.64934], [400, 1200, 68.66921], [600, 1000, 79.04148], [1000, 800, 79.10883], [1200, 800, 95.82643], [600, 1200, 101.27951], [800, 1000, 110.16818], [1000, 1000, 129.21861], [800, 1200, 133.26169], [1200, 1000, 148.63193], [1000, 1200, 165.58878], [1200, 1200, 199.80641]], 'docker_plots': [[50, 50, 0.0325], [200, 50, 0.09889], [400, 50, 0.19873], [600, 50, 0.28883], [800, 50, 0.37444], [1000, 50, 0.47357], [50, 200, 0.51964], [1200, 50, 0.56384], [200, 200, 1.59926], [50, 400, 2.08345], [400, 200, 3.03911], [600, 200, 4.53776], [50, 600, 4.68891], [800, 200, 5.84587], [200, 400, 6.32096], [1000, 200, 7.5212], [50, 800, 8.35079], [1200, 200, 8.9609], [400, 400, 12.07946], [50, 1000, 13.12754], [200, 600, 14.16808], [600, 400, 17.70403], [50, 1200, 18.72711], [800, 400, 23.42207], [200, 800, 25.13728], [400, 600, 27.04739], [1000, 400, 29.2527], [1200, 400, 34.65029], [200, 1000, 39.09821], [600, 600, 40.05794], [400, 800, 49.26928], [800, 600, 53.15077], [200, 1200, 56.24825], [1000, 600, 65.0468], [600, 800, 70.77222], [400, 1000, 74.68974], [1200, 600, 79.04085], [800, 800, 93.90385], [400, 1200, 107.12655], [600, 1000, 110.36971], [1000, 800, 116.20199], [1200, 800, 139.42766], [800, 1000, 145.8633], [600, 1200, 158.30655], [1000, 1000, 181.98376], [800, 1200, 213.43777], [1200, 1000, 216.16956], [1000, 1200, 260.11497], [1200, 1200, 310.05135]], 'docker_priviliged_plots': [[50, 50, 0.01848], [200, 50, 0.05779], [400, 50, 0.11505], [600, 50, 0.16502], [800, 50, 0.21604], [1000, 50, 0.26816], [50, 200, 0.30113], [1200, 50, 0.34504], [200, 200, 0.91591], [50, 400, 1.18603], [400, 200, 1.72644], [600, 200, 2.56205], [50, 600, 2.66286], [800, 200, 3.38837], [200, 400, 3.66344], [1000, 200, 4.22918], [50, 800, 4.745], [1200, 200, 5.04491], [400, 400, 6.89622], [50, 1000, 7.46166], [200, 600, 8.15129], [600, 400, 10.23077], [50, 1200, 10.68222], [800, 400, 13.44119], [200, 800, 14.50651], [400, 600, 15.53525], [1000, 400, 16.68988], [1200, 400, 20.02146], [200, 1000, 22.60275], [600, 600, 23.00073], [400, 800, 27.5925], [800, 600, 30.19367], [200, 1200, 32.68412], [1000, 600, 37.54133], [600, 800, 40.85617], [400, 1000, 42.93177], [1200, 600, 45.24986], [800, 800, 53.99984], [400, 1200, 61.99994], [600, 1000, 63.82143], [1000, 800, 67.15384], [1200, 800, 80.4279], [800, 1000, 84.219], [600, 1200, 91.66197], [1000, 1000, 104.21508], [800, 1200, 121.39065], [1200, 1000, 125.25664], [1000, 1200, 150.19395], [1200, 1200, 179.19719]]}
>>> sorted_machine_plots_tuples = {key: sorted(value, key=lambda x: x[2]) for key, value in machine_plots_tuples.items()}
>>> local_ratio = [d[1] / d[0] for d in zip(sorted_machine_plots_tuples['local_machine_plots'], sorted_machine_plots_tuples['local_machine_plots'])]
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#153>", line 1, in <module>
  File "<pyshell#153>", line 1, in <listcomp>
TypeError: unsupported operand type(s) for /: 'list' and 'list'
>>> local_ratio = [d[1][2] / d[0][2] for d in zip(sorted_machine_plots_tuples['local_machine_plots'], sorted_machine_plots_tuples['local_machine_plots'])]
>>> vm_ratio = [d[1][2] / d[0][2] for d in zip(sorted_machine_plots_tuples['local_machine_plots'], sorted_machine_plots_tuples['vm_plots'])]
>>> docker_ratio
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#156>", line 1, in <module>
NameError: name 'docker_ratio' is not defined
>>> docker_ratio = [d[1][2] / d[0][2] for d in zip(sorted_machine_plots_tuples['local_machine_plots'], sorted_machine_plots_tuples['docker_plots'])]
>>> docker_priviliged_ratio = [d[1][2] / d[0][2] for d in zip(sorted_machine_plots_tuples['local_machine_plots'], sorted_machine_plots_tuples['docker_priviliged_plots'])]
>>> plt.plot(local_ratio, 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f712a60cca0>]
>>> plt.plot(vm_ratio, 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f712a60c8b0>]
>>> plt.plot(docker_ratio, 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f712a60c2b0>]
>>> plt.plot(docker_priviliged_ratio, 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f712a641c40>]
>>> plt.title("Ratio of runtime on each iteration compared to local machine")
Text(0.5, 1.0, 'Ratio of runtime on each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 0, 'plots')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.savefig('sorted time_differences.png')
>>> plt.plot([d for d in differences['local_machine_plots'].values()], 'k', label='local_machine')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#167>", line 1, in <module>
AttributeError: 'list' object has no attribute 'values'
>>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f712a641dc0>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f712a68b1c0>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f712a6712e0>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f712a671d30>]
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 47.04444444444444, 'plots')
>>> plt.ylabel('seconds')
Text(85.19444444444443, 0.5, 'seconds')
>>> plt.savefig('sorted time_differences.png')
>>> plt.show()
>>> plt.plot(local_ratio, 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f71300b1880>]
>>> plt.plot(vm_ratio, 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f71300b1190>]
>>> docker_ratio
[1.654786150712831, 1.6375227686703098, 1.765861027190332, 1.7373233082706765, 1.7161189788716256, 1.6790880726138135, 1.6715131240349974, 1.7360140398411281, 1.6942210922188674, 1.6704751367040298, 1.7161871417680774, 1.7425578323246596, 1.729771904777715, 1.5896531563991352, 1.6927621307353025, 1.7025457146608354, 1.754563008066024, 1.7535561717607968, 1.710923203308688, 1.7634777515676803, 1.7280042931541266, 1.6585565785677079, 1.667356089326384, 1.730123801503937, 1.7192174457214964, 1.7413506716918548, 1.7444406676565825, 1.732144687109302, 1.7191043891491848, 1.7459248036932176, 1.7665470545884283, 1.7555564290088368, 1.493518062704751, 1.6971534427427142, 1.66391714766008, 1.6540464264035362, 1.6224706900250123, 1.744067071952168, 1.665562526761335, 1.6453248917723104, 1.6422118377420736, 1.7440628878878848, 1.6326497946921616, 1.6152119324430614, 1.6604730361648627, 1.6413498521008676, 1.645713674928673, 1.7284198666342667, 1.72164361749149]
>>> plt.plot(docker_ratio, 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f71300be310>]
>>> plt.plot(docker_priviliged_ratio, 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f71300bed30>]
>>> plt.title("Ratio of runtime on each iteration compared to local machine")
Text(0.5, 1.0, 'Ratio of runtime on each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 0, 'plots')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.legend()
<matplotlib.legend.Legend object at 0x7f71300b1730>
>>> plt.savefig('runtime-ratios.png')
>>> plt.show()
>>> machine_plots_tuples
{'local_machine_plots': [[50, 50, 0.01964], [200, 50, 0.06039], [400, 50, 0.11254], [600, 50, 0.16625], [800, 50, 0.21819], [1000, 50, 0.28204], [50, 200, 0.31088], [1200, 50, 0.32479], [200, 200, 0.94395], [50, 400, 1.24722], [400, 200, 1.77085], [600, 200, 2.60408], [50, 600, 2.71071], [800, 200, 3.67745], [200, 400, 3.73411], [1000, 200, 4.41762], [50, 800, 4.75947], [1200, 200, 5.11013], [400, 400, 7.0602], [50, 1000, 7.44412], [200, 600, 8.1991], [50, 1200, 10.67436], [600, 400, 11.23162], [800, 400, 13.5378], [200, 800, 14.62135], [400, 600, 15.53242], [1000, 400, 16.7691], [1200, 400, 20.00427], [200, 1000, 22.74336], [600, 600, 22.94368], [400, 800, 27.89016], [800, 600, 30.27574], [200, 1200, 37.66158], [1000, 600, 38.327], [600, 800, 42.5335], [1200, 600, 45.15577], [400, 1000, 48.71635], [800, 800, 53.84188], [600, 1000, 64.31854], [1000, 800, 67.0808], [400, 1200, 70.75944], [1200, 800, 79.94417], [800, 1000, 89.34145], [600, 1200, 98.00977], [1000, 1000, 109.59754], [1200, 1000, 130.03795], [800, 1200, 131.35308], [1000, 1200, 150.49293], [1200, 1200, 180.09032]], 'vm_plots': [[50, 50, 0.02081], [200, 50, 0.06404], [400, 50, 0.12375], [600, 50, 0.17873], [800, 50, 0.23915], [1000, 50, 0.29962], [1200, 50, 0.37319], [50, 200, 0.38495], [200, 200, 1.07619], [50, 400, 1.32784], [400, 200, 2.02868], [600, 200, 2.86543], [50, 600, 2.94257], [800, 200, 3.73648], [200, 400, 4.02143], [1000, 200, 4.87824], [50, 800, 5.19837], [1200, 200, 5.74802], [400, 400, 7.6232], [50, 1000, 8.13086], [200, 600, 9.06626], [600, 400, 11.2267], [50, 1200, 11.74828], [800, 400, 14.92091], [200, 800, 16.00024], [400, 600, 17.17082], [1000, 400, 18.63628], [1200, 400, 22.08516], [600, 600, 25.35328], [200, 1000, 29.73211], [400, 800, 30.49575], [800, 600, 33.46767], [200, 1200, 36.00166], [1000, 600, 41.59115], [600, 800, 44.83247], [400, 1000, 52.69623], [1200, 600, 56.01615], [800, 800, 59.64934], [400, 1200, 68.66921], [600, 1000, 79.04148], [1000, 800, 79.10883], [1200, 800, 95.82643], [600, 1200, 101.27951], [800, 1000, 110.16818], [1000, 1000, 129.21861], [800, 1200, 133.26169], [1200, 1000, 148.63193], [1000, 1200, 165.58878], [1200, 1200, 199.80641]], 'docker_plots': [[50, 50, 0.0325], [200, 50, 0.09889], [400, 50, 0.19873], [600, 50, 0.28883], [800, 50, 0.37444], [1000, 50, 0.47357], [50, 200, 0.51964], [1200, 50, 0.56384], [200, 200, 1.59926], [50, 400, 2.08345], [400, 200, 3.03911], [600, 200, 4.53776], [50, 600, 4.68891], [800, 200, 5.84587], [200, 400, 6.32096], [1000, 200, 7.5212], [50, 800, 8.35079], [1200, 200, 8.9609], [400, 400, 12.07946], [50, 1000, 13.12754], [200, 600, 14.16808], [600, 400, 17.70403], [50, 1200, 18.72711], [800, 400, 23.42207], [200, 800, 25.13728], [400, 600, 27.04739], [1000, 400, 29.2527], [1200, 400, 34.65029], [200, 1000, 39.09821], [600, 600, 40.05794], [400, 800, 49.26928], [800, 600, 53.15077], [200, 1200, 56.24825], [1000, 600, 65.0468], [600, 800, 70.77222], [400, 1000, 74.68974], [1200, 600, 79.04085], [800, 800, 93.90385], [400, 1200, 107.12655], [600, 1000, 110.36971], [1000, 800, 116.20199], [1200, 800, 139.42766], [800, 1000, 145.8633], [600, 1200, 158.30655], [1000, 1000, 181.98376], [800, 1200, 213.43777], [1200, 1000, 216.16956], [1000, 1200, 260.11497], [1200, 1200, 310.05135]], 'docker_priviliged_plots': [[50, 50, 0.01848], [200, 50, 0.05779], [400, 50, 0.11505], [600, 50, 0.16502], [800, 50, 0.21604], [1000, 50, 0.26816], [50, 200, 0.30113], [1200, 50, 0.34504], [200, 200, 0.91591], [50, 400, 1.18603], [400, 200, 1.72644], [600, 200, 2.56205], [50, 600, 2.66286], [800, 200, 3.38837], [200, 400, 3.66344], [1000, 200, 4.22918], [50, 800, 4.745], [1200, 200, 5.04491], [400, 400, 6.89622], [50, 1000, 7.46166], [200, 600, 8.15129], [600, 400, 10.23077], [50, 1200, 10.68222], [800, 400, 13.44119], [200, 800, 14.50651], [400, 600, 15.53525], [1000, 400, 16.68988], [1200, 400, 20.02146], [200, 1000, 22.60275], [600, 600, 23.00073], [400, 800, 27.5925], [800, 600, 30.19367], [200, 1200, 32.68412], [1000, 600, 37.54133], [600, 800, 40.85617], [400, 1000, 42.93177], [1200, 600, 45.24986], [800, 800, 53.99984], [400, 1200, 61.99994], [600, 1000, 63.82143], [1000, 800, 67.15384], [1200, 800, 80.4279], [800, 1000, 84.219], [600, 1200, 91.66197], [1000, 1000, 104.21508], [800, 1200, 121.39065], [1200, 1000, 125.25664], [1000, 1200, 150.19395], [1200, 1200, 179.19719]]}
>>> vm_total = sum([d[2] for d in machine_plots_tuples['local_machine_plots']])
>>> vm_total
1698.65966
>>> docker_total = sum([d[2] for d in machine_plots_tuples['docker_plots']])
>>> docker_priviliged_total = sum([d[2] for d in machine_plots_tuples['docker_priviliged_plots']])
>>> local_total = sum([d[2] for d in machine_plots_tuples['local_machine_plots']])
>>> local_total
1698.65966
>>> vm_total
1698.65966
>>> docker_total
2851.14568
>>> vm_total = sum([d[2] for d in machine_plots_tuples['vm_plots']])
>>> vm_total
1892.55307
>>> docker_total
2851.14568
>>> local_total
1698.65966
>>> docker_priviliged_total
1641.4176800000002
>>> import numpy as np
>>> plt.bar(['local_machine', 'vm', 'docker', 'docker_priviliged'], [local_total, vm_total, docker_total, docker_priviliged_total], color=['k', 'r', 'b', 'y'])
<BarContainer object of 4 artists>
>>> plt.show()
>>> plt.bar(['local_machine', 'vm', 'docker', 'docker_priviliged'], [local_total, vm_total, docker_total, docker_priviliged_total], color=['k', 'r', 'b', 'y'])
<BarContainer object of 4 artists>
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.title('total runtime')
Text(0.5, 1.0, 'total runtime')
>>> plt.savefig('total-runtime.png')
>>> plt.show()
>>> local_800 = [tuple for tuple in machine_plots_tuples['local_machine_plots'] if tuple[0] == 800]
>>> vm = [tuple for tuple in machine_plots_tuples['vm_plots'] if tuple[0] == 800]
>>> vm_800 - vm
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#212>", line 1, in <module>
NameError: name 'vm_800' is not defined
>>> vm_800 = vm
>>> docker_total = [tuple for tuple in machine_plots_tuples['docker_plots'] if tuple[0] == 800]
>>> docker_p_total = = [tuple for tuple in machine_plots_tuples['docker_priviliged_plots'] if tuple[0] == 800]
SyntaxError: invalid syntax
>>> docker_p_total = [tuple for tuple in machine_plots_tuples['docker_priviliged_plots'] if tuple[0] == 800]
>>> docker_p_total
[[800, 50, 0.21604], [800, 200, 3.38837], [800, 400, 13.44119], [800, 600, 30.19367], [800, 800, 53.99984], [800, 1000, 84.219], [800, 1200, 121.39065]]
>>> docker_800 = docker_total
>>> docker_p_800 = docker_p_total
>>> docker_800
[[800, 50, 0.37444], [800, 200, 5.84587], [800, 400, 23.42207], [800, 600, 53.15077], [800, 800, 93.90385], [800, 1000, 145.8633], [800, 1200, 213.43777]]
>>> local_800_w = [tuple for tuple in machine_plots_tuples['local_machine_plots'] if tuple[1] == 800]
>>> vm_800_w = [tuple for tuple in machine_plots_tuples['vm_plots'] if tuple[1] == 800]
>>> docker_800_w = [tuple for tuple in machine_plots_tuples['docker_plots'] if tuple[1] == 800]
>>> docker_p_800_w = [tuple for tuple in machine_plots_tuples['docker_priviliged_plots'] if tuple[1] == 800]
>>> docker_800_w
[[50, 800, 8.35079], [200, 800, 25.13728], [400, 800, 49.26928], [600, 800, 70.77222], [800, 800, 93.90385], [1000, 800, 116.20199], [1200, 800, 139.42766]]
>>> plt.plot([x[0] for x in local_800], [x[2] for x in local_800], 'k', label='width changing')
[<matplotlib.lines.Line2D object at 0x7f712a63dd30>]
>>> plt.plot([x[0] for x in local_800_w], [x[2] for x in local_800_w], 'k', label='max_iter changing')
[<matplotlib.lines.Line2D object at 0x7f713c0c00d0>]
>>> plt.show()
>>> plt.plot([x[0] for x in local_800], [x[2] for x in local_800], 'k', label='width changing')
[<matplotlib.lines.Line2D object at 0x7f713c10f8e0>]
>>> plt.plot([x[0] for x in local_800_w], [x[1] for x in local_800_w], 'r', label='max_iter changing')plt.plot([x[0] for x in local_800], [x[2] for x in local_800], 'k', label='width changing')
SyntaxError: invalid syntax
>>> plt.plot([x[0] for x in local_800], [x[2] for x in local_800], 'b', label='width changing')
[<matplotlib.lines.Line2D object at 0x7f713c10fc40>]
>>> plt.show()
>>> plt.plot([x[0] for x in local_800], [x[2] for x in local_800], 'b', label='width changing')
[<matplotlib.lines.Line2D object at 0x7f713c137df0>]
>>> plt.plot([x[1] for x in local_800], [x[2] for x in local_800-w], 'r', label='max_iter changing')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#234>", line 1, in <module>
NameError: name 'w' is not defined
>>> plt.plot([x[1] for x in local_800], [x[2] for x in local_800_w], 'r', label='max_iter changing')
[<matplotlib.lines.Line2D object at 0x7f71300c2190>]
>>> plt.title('max_iter vs width effect on runtime')
Text(0.5, 1.0, 'max_iter vs width effect on runtime')
>>> plt.legend()
<matplotlib.legend.Legend object at 0x7f713c0b8e20>
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.xlable('max_iter or width depending on label')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#239>", line 1, in <module>
AttributeError: module 'matplotlib.pyplot' has no attribute 'xlable'
>>> plt.xlabel('max_iter or width depending on label')
Text(0.5, 0, 'max_iter or width depending on label')
>>> plt.savefig('complexity-analysis.png')
>>> plt.show()
>>> plt.plot([x[1] for x in local_800], [x[2] for x in local_800_w], 'r', label='max_iter changing')
[<matplotlib.lines.Line2D object at 0x7f713c08efd0>]
>>> plt.show()
>>> plt.plot([x[1] for x in local_800], [x[2] for x in local_800_w], 'r', label='max_iter changing')
[<matplotlib.lines.Line2D object at 0x7f7130076c10>]
>>> plt.plot([x[1] for x in local_800], [x[2] for x in local_800], 'b', label='width changing')
[<matplotlib.lines.Line2D object at 0x7f7130076f70>]
>>> plt.show()
>>> plt.plot([x[1] for x in local_800], [x[2] for x in local_800], 'b', label='width changing')
[<matplotlib.lines.Line2D object at 0x7f71301548e0>]
>>> plt.plot([x[0] for x in local_800_w], [x[2] for x in local_800_w], 'r', label='max_iter changing')
[<matplotlib.lines.Line2D object at 0x7f7130154c40>]
>>> plt.title('max_iter vs width effect on runtime')
Text(0.5, 1.0, 'max_iter vs width effect on runtime')
>>> plt.legend()
<matplotlib.legend.Legend object at 0x7f7130165580>
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.xlable('max_iter or width depending on label')
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#253>", line 1, in <module>
AttributeError: module 'matplotlib.pyplot' has no attribute 'xlable'
>>> plt.xlabel('max_iter or width depending on label')
Text(0.5, 0, 'max_iter or width depending on label')
>>> plt.savefig('complexity-analysis.png')
>>> plt.show()
>>> ls
Traceback (most recent call last):
  File "/usr/lib/python3.8/idlelib/run.py", line 559, in runcode
    exec(code, self.locals)
  File "<pyshell#257>", line 1, in <module>
NameError: name 'ls' is not defined
>>> >>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f712a64ea00>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f712a64ed60>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f712a65d100>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f712a65d460>]
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 0, 'plots')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.savefig('sorted time_differences.png')
>>> plt.show()
SyntaxError: invalid syntax
>>> >>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f712a64ea00>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f712a64ed60>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f712a65d100>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f712a65d460>]
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 0, 'plots')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.savefig('sorted time_differences.png')
>>> plt.show()
SyntaxError: invalid syntax
>>> 
>>> >>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f712a64ea00>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f712a64ed60>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f712a65d100>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f712a65d460>]
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 0, 'plots')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.savefig('sorted time_differences.png')
>>> 
SyntaxError: invalid syntax
>>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713182eac0>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f713182ee20>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f713183b1c0>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f713183b520>]
>>> plt.show()
>>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f713011af40>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f713011aca0>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f713010cfd0>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f713010cf70>]
>>> >>> plt.plot(differences['local_machine_plots'], 'k', label='local_machine')
[<matplotlib.lines.Line2D object at 0x7f712a64ea00>]
>>> plt.plot(differences['vm_plots'], 'r', label='vm')
[<matplotlib.lines.Line2D object at 0x7f712a64ed60>]
>>> plt.plot(differences['docker_plots'], 'b', label='docker')
[<matplotlib.lines.Line2D object at 0x7f712a65d100>]
>>> plt.plot(differences['docker_priviliged_plots'], 'y', label='docker priviliged')
[<matplotlib.lines.Line2D object at 0x7f712a65d460>]
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.xlabel('plots')
Text(0.5, 0, 'plots')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.savefig('sorted time_differences.png')
>>> plt.show()
SyntaxError: invalid syntax
>>> plt.title("Time differences for each iteration compared to local machine")
Text(0.5, 1.0, 'Time differences for each iteration compared to local machine')
>>> plt.xlabel('plot')
Text(0.5, 0, 'plot')
>>> plt.ylabel('seconds')
Text(0, 0.5, 'seconds')
>>> plt.legend()
<matplotlib.legend.Legend object at 0x7f71317e4310>
>>> plt.savefig('sorted_time_differences')
>>> 